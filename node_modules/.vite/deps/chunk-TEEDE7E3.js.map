{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx", "../../vuetify/src/composables/color.ts", "../../vuetify/src/composables/size.ts", "../../vuetify/src/composables/density.ts", "../../vuetify/src/composables/rounded.ts", "../../vuetify/src/composables/transition.ts"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, Text, toRef } from 'vue'\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'VIcon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    const slotIcon = ref<string>()\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(computed(() => slotIcon.value || props.icon))\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => {\n      const slotValue = slots.default?.()\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      }\n\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            themeClasses.value,\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--clickable': !!attrs.onClick,\n              'v-icon--start': props.start,\n              'v-icon--end': props.end,\n            },\n            props.class,\n          ]}\n          style={[\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n            props.style,\n          ]}\n          role={ attrs.onClick ? 'button' : undefined }\n          aria-hidden={ !attrs.onClick }\n        >\n          { slotValue }\n        </iconData.value.component>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background\n\n        if (!colors.value.text && isParsableColor(colors.value.background)) {\n          const backgroundColor = parseColor(colors.value.background)\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            const textColor = getForeground(backgroundColor)\n\n            styles.color = textColor\n            styles.caretColor = textColor\n          }\n        }\n      } else {\n        classes.push(`bg-${colors.value.background}`)\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text\n        styles.caretColor = colors.value.text\n      } else {\n        classes.push(`text-${colors.value.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n", "// Utilities\nimport { convertToUnit, destructComputed, getCurrentInstanceName, includes, propsFactory } from '@/util'\n\n// Types\nconst predefinedSizes = ['x-small', 'small', 'default', 'large', 'x-large']\n\nexport interface SizeProps {\n  size?: string | number\n}\n\n// Composables\nexport const makeSizeProps = propsFactory({\n  size: {\n    type: [String, Number],\n    default: 'default',\n  },\n}, 'size')\n\nexport function useSize (\n  props: SizeProps,\n  name = getCurrentInstanceName(),\n) {\n  return destructComputed(() => {\n    let sizeClasses\n    let sizeStyles\n    if (includes(predefinedSizes, props.size)) {\n      sizeClasses = `${name}--size-${props.size}`\n    } else if (props.size) {\n      sizeStyles = {\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size),\n      }\n    }\n    return { sizeClasses, sizeStyles }\n  })\n}\n", "// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst allowedDensities = [null, 'default', 'comfortable', 'compact'] as const\n\n// typeof allowedDensities[number] evalutes to any\n// when generating api types for whatever reason.\nexport type Density = null | 'default' | 'comfortable' | 'compact'\n\nexport interface DensityProps {\n  density?: Density\n}\n\n// Composables\nexport const makeDensityProps = propsFactory({\n  density: {\n    type: String as PropType<Density>,\n    default: 'default',\n    validator: (v: any) => allowedDensities.includes(v),\n  },\n}, 'density')\n\nexport function useDensity (\n  props: DensityProps,\n  name = getCurrentInstanceName(),\n) {\n  const densityClasses = computed(() => {\n    return `${name}--density-${props.density}`\n  })\n\n  return { densityClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n", "// Utilities\nimport { h, mergeProps, Transition } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Component, FunctionalComponent, PropType, TransitionProps } from 'vue'\n\nexport const makeTransitionProps = propsFactory({\n  transition: {\n    type: [Boolean, String, Object] as PropType<string | boolean | TransitionProps & { component?: Component }>,\n    default: 'fade-transition',\n    validator: val => val !== true,\n  },\n}, 'transition')\n\ninterface MaybeTransitionProps extends TransitionProps {\n  transition?: string | boolean | TransitionProps & { component?: any }\n  disabled?: boolean\n}\n\nexport const MaybeTransition: FunctionalComponent<MaybeTransitionProps> = (props, { slots }) => {\n  const { transition, disabled, ...rest } = props\n\n  const { component = Transition, ...customProps } = typeof transition === 'object' ? transition : {}\n\n  return h(\n    component,\n    mergeProps(typeof transition === 'string'\n      ? { name: disabled ? '' : transition }\n      : customProps as any,\n    rest as any,\n    { disabled }),\n    slots\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;;;ACmBO,SAASA,SAAUC,QAA6D;AACrF,SAAOC,iBAAiB,MAAM;AAC5B,UAAMC,UAAoB,CAAA;AAC1B,UAAMC,SAAwB,CAAC;AAE/B,QAAIH,OAAOI,MAAMC,YAAY;AAC3B,UAAIC,WAAWN,OAAOI,MAAMC,UAAU,GAAG;AACvCF,eAAOI,kBAAkBP,OAAOI,MAAMC;AAEtC,YAAI,CAACL,OAAOI,MAAMI,QAAQC,gBAAgBT,OAAOI,MAAMC,UAAU,GAAG;AAClE,gBAAME,kBAAkBG,WAAWV,OAAOI,MAAMC,UAAU;AAC1D,cAAIE,gBAAgBI,KAAK,QAAQJ,gBAAgBI,MAAM,GAAG;AACxD,kBAAMC,YAAYC,cAAcN,eAAe;AAE/CJ,mBAAOW,QAAQF;AACfT,mBAAOY,aAAaH;UACtB;QACF;MACF,OAAO;AACLV,gBAAQc,KAAM,MAAKhB,OAAOI,MAAMC,UAAW,EAAC;MAC9C;IACF;AAEA,QAAIL,OAAOI,MAAMI,MAAM;AACrB,UAAIF,WAAWN,OAAOI,MAAMI,IAAI,GAAG;AACjCL,eAAOW,QAAQd,OAAOI,MAAMI;AAC5BL,eAAOY,aAAaf,OAAOI,MAAMI;MACnC,OAAO;AACLN,gBAAQc,KAAM,QAAOhB,OAAOI,MAAMI,IAAK,EAAC;MAC1C;IACF;AAEA,WAAO;MAAES,cAAcf;MAASgB,aAAaf;IAAO;EACtD,CAAC;AACH;AAIO,SAASgB,aACdC,OACAC,MACe;AACf,QAAMrB,SAASsB,SAAS,OAAO;IAC7Bd,MAAMe,MAAMH,KAAK,IAAIA,MAAMhB,QAASiB,OAAOD,MAAMC,IAAI,IAAI;EAC3D,EAAE;AAEF,QAAM;IACJJ,cAAcO;IACdN,aAAaO;EACf,IAAI1B,SAASC,MAAM;AAEnB,SAAO;IAAEwB;IAAkBC;EAAgB;AAC7C;AAIO,SAASC,mBACdN,OACAC,MACqB;AACrB,QAAMrB,SAASsB,SAAS,OAAO;IAC7BjB,YAAYkB,MAAMH,KAAK,IAAIA,MAAMhB,QAASiB,OAAOD,MAAMC,IAAI,IAAI;EACjE,EAAE;AAEF,QAAM;IACJJ,cAAcU;IACdT,aAAaU;EACf,IAAI7B,SAASC,MAAM;AAEnB,SAAO;IAAE2B;IAAwBC;EAAsB;AACzD;;;ACtFA,IAAMC,kBAAkB,CAAC,WAAW,SAAS,WAAW,SAAS,SAAS;AAOnE,IAAMC,gBAAgBC,aAAa;EACxCC,MAAM;IACJC,MAAM,CAACC,QAAQC,MAAM;IACrBC,SAAS;EACX;AACF,GAAG,MAAM;AAEF,SAASC,QACdC,OAEA;AAAA,MADAC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAGG,uBAAsB;AAE7B,SAAOC,iBAAiB,MAAM;AAC5B,QAAIC;AACJ,QAAIC;AACJ,QAAIC,SAASlB,iBAAiBS,MAAMN,IAAI,GAAG;AACzCa,oBAAe,GAAEN,IAAK,UAASD,MAAMN,IAAK;IAC5C,WAAWM,MAAMN,MAAM;AACrBc,mBAAa;QACXE,OAAOC,cAAcX,MAAMN,IAAI;QAC/BkB,QAAQD,cAAcX,MAAMN,IAAI;MAClC;IACF;AACA,WAAO;MAAEa;MAAaC;IAAW;EACnC,CAAC;AACH;;;AFpBO,IAAMK,iBAAiBC,aAAa;EACzCC,OAAOC;EACPC,OAAOC;EACPC,KAAKD;EACLE,MAAMC;EAEN,GAAGC,mBAAkB;EACrB,GAAGC,cAAa;EAChB,GAAGC,aAAa;IAAEC,KAAK;EAAI,CAAC;EAC5B,GAAGC,eAAc;AACnB,GAAG,OAAO;AAEH,IAAMC,QAAQC,iBAAgB,EAAG;EACtCC,MAAM;EAENC,OAAOjB,eAAc;EAErBkB,MAAOD,OAAKE,MAAoB;AAAA,QAAlB;MAAEC;MAAOC;IAAM,IAACF;AAC5B,UAAMG,WAAWC,IAAG;AAEpB,UAAM;MAAEC;IAAa,IAAIC,aAAaR,KAAK;AAC3C,UAAM;MAAES;IAAS,IAAIC,QAAQC,SAAS,MAAMN,SAASO,SAASZ,MAAMV,IAAI,CAAC;AACzE,UAAM;MAAEuB;IAAY,IAAIC,QAAQd,KAAK;AACrC,UAAM;MAAEe;MAAkBC;IAAgB,IAAIC,aAAaC,MAAMlB,OAAO,OAAO,CAAC;AAEhFmB,cAAU,MAAM;;AACd,YAAMC,aAAYhB,WAAMiB,YAANjB;AAClB,UAAIgB,WAAW;AACbf,iBAASO,SAAQU,sBAAiBF,SAAS,EAAEG,OAAOC,UAClDA,KAAKC,SAASC,QAAQF,KAAKG,YAAY,OAAOH,KAAKG,aAAa,QAAQ,EACxE,CAAC,MAFcL,mBAEXK;MACR;AAEA,aAAAC,YAAAnB,SAAAG,MAAAiB,WAAA;QAAA,OAEU7B,MAAML;QAAG,QACRc,SAASG,MAAMtB;QAAI,SACnB,CACL,UACA,eACAiB,aAAaK,OACbC,YAAYD,OACZG,iBAAiBH,OACjB;UACE,qBAAqB,CAAC,CAACT,MAAM2B;UAC7B,iBAAiB9B,MAAMb;UACvB,eAAea,MAAMX;QACvB,GACAW,MAAM+B,KAAK;QACZ,SACM,CACL,CAAClB,YAAYD,QAAS;UACpBoB,UAAUC,cAAcjC,MAAMkC,IAAI;UAClCC,QAAQF,cAAcjC,MAAMkC,IAAI;UAChCE,OAAOH,cAAcjC,MAAMkC,IAAI;QACjC,IAAKG,QACLrB,gBAAgBJ,OAChBZ,MAAMsC,KAAK;QACZ,QACMnC,MAAM2B,UAAU,WAAWO;QAAS,eAC7B,CAAClC,MAAM2B;MAAO,GAAA;QAAAT,SAAAA,MAAA,CAE1BD,SAAS;MAAA,CAAA;IAGjB,CAAC;AAED,WAAO,CAAC;EACV;AACF,CAAC;;;AG7ED,IAAMmB,mBAAmB,CAAC,MAAM,WAAW,eAAe,SAAS;AAW5D,IAAMC,mBAAmBC,aAAa;EAC3CC,SAAS;IACPC,MAAMC;IACNC,SAAS;IACTC,WAAYC,OAAWR,iBAAiBS,SAASD,CAAC;EACpD;AACF,GAAG,SAAS;AAEL,SAASE,WACdC,OAEA;AAAA,MADAC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAGG,uBAAsB;AAE7B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,WAAQ,GAAEN,IAAK,aAAYD,MAAMR,OAAQ;EAC3C,CAAC;AAED,SAAO;IAAEc;EAAe;AAC1B;;;AChBO,IAAME,mBAAmBC,aAAa;EAC3CC,SAAS;IACPC,MAAM,CAACC,SAASC,QAAQC,MAAM;IAC9BC,SAASC;EACX;AACF,GAAG,SAAS;AAEL,SAASC,WACdC,OAEa;AAAA,MADbC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAJ,SAAAI,UAAA,CAAA,IAAGE,uBAAsB;AAE7B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,UAAMd,UAAUe,MAAMP,KAAK,IAAIA,MAAMQ,QAAQR,MAAMR;AACnD,UAAMiB,UAAoB,CAAA;AAE1B,QAAIjB,YAAY,QAAQA,YAAY,IAAI;AACtCiB,cAAQC,KAAM,GAAET,IAAK,WAAU;IACjC,WACE,OAAOT,YAAY,YACnBA,YAAY,GACZ;AACA,iBAAWgB,SAASZ,OAAOJ,OAAO,EAAEmB,MAAM,GAAG,GAAG;AAC9CF,gBAAQC,KAAM,WAAUF,KAAM,EAAC;MACjC;IACF;AAEA,WAAOC;EACT,CAAC;AAED,SAAO;IAAEJ;EAAe;AAC1B;;;AC1CO,IAAMO,sBAAsBC,aAAa;EAC9CC,YAAY;IACVC,MAAM,CAACC,SAASC,QAAQC,MAAM;IAC9BC,SAAS;IACTC,WAAWC,SAAOA,QAAQ;EAC5B;AACF,GAAG,YAAY;AAOR,IAAMC,kBAA6DA,CAACC,OAAKC,SAAgB;AAAA,MAAd;IAAEC;EAAM,IAACD;AACzF,QAAM;IAAEV;IAAYY;IAAU,GAAGC;EAAK,IAAIJ;AAE1C,QAAM;IAAEK,YAAYC;IAAY,GAAGC;EAAY,IAAI,OAAOhB,eAAe,WAAWA,aAAa,CAAC;AAElG,SAAOiB,EACLH,WACAI,WAAW,OAAOlB,eAAe,WAC7B;IAAEmB,MAAMP,WAAW,KAAKZ;EAAW,IACnCgB,aACJH,MACA;IAAED;EAAS,CAAC,GACZD,KAAK;AAET;",
  "names": ["useColor", "colors", "destructComputed", "classes", "styles", "value", "background", "isCssColor", "backgroundColor", "text", "isParsableColor", "parseColor", "a", "textColor", "getForeground", "color", "caretColor", "push", "colorClasses", "colorStyles", "useTextColor", "props", "name", "computed", "isRef", "textColorClasses", "textColorStyles", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles", "predefinedSizes", "makeSizeProps", "propsFactory", "size", "type", "String", "Number", "default", "useSize", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "destructComputed", "sizeClasses", "sizeStyles", "includes", "width", "convertToUnit", "height", "makeVIconProps", "propsFactory", "color", "String", "start", "Boolean", "end", "icon", "IconValue", "makeComponentProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "genericComponent", "name", "props", "setup", "_ref", "attrs", "slots", "slotIcon", "ref", "themeClasses", "provideTheme", "iconData", "useIcon", "computed", "value", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "useRender", "slotValue", "default", "flattenFragments", "filter", "node", "type", "Text", "children", "_createVNode", "component", "onClick", "class", "fontSize", "convertToUnit", "size", "height", "width", "undefined", "style", "allowedDensities", "makeDensityProps", "propsFactory", "density", "type", "String", "default", "validator", "v", "includes", "useDensity", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "densityClasses", "computed", "makeRoundedProps", "propsFactory", "rounded", "type", "Boolean", "Number", "String", "default", "undefined", "useRounded", "props", "name", "arguments", "length", "getCurrentInstanceName", "roundedClasses", "computed", "isRef", "value", "classes", "push", "split", "makeTransitionProps", "propsFactory", "transition", "type", "Boolean", "String", "Object", "default", "validator", "val", "MaybeTransition", "props", "_ref", "slots", "disabled", "rest", "component", "Transition", "customProps", "h", "mergeProps", "name"]
}
